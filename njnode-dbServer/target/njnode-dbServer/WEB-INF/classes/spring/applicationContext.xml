<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	
	<context:annotation-config />
	<!-- 对包下所有注解扫描 -->
	<context:component-scan base-package="cn.njnode"></context:component-scan>
	
	<!-- 支持spring mvc新的注解类型 详细spring3.0手册 15.12.1 mvc:annotation-driven -->
	<mvc:annotation-driven />
	<task:annotation-driven />

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:resource/db.properties" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--初始化连接 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 最大连接数量 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!--最大空闲连接 -->
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<!-- 最小空闲连接 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于6秒 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!--超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
		<property name="logAbandoned" value="true" />
		<property name="validationQuery" value="select 1 from dual" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />
	</bean>

	<!-- 定义事务处理类，不同的数据访问方式，事务处理类不同 比如：Hibernate操作的HibernateTransactionManager，JDBC操作的使用DataSourceTransactionManager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 定义事务通知 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<!-- 定义方法的过滤规则 -->
		<tx:attributes>
			<!-- 所有方法都使用事务 -->
			<tx:method name="add*" propagation="REQUIRED" />

			<tx:method name="del*" propagation="REQUIRED" />

			<tx:method name="update*" propagation="REQUIRED" />
			<!-- 定义所有query开头的方法都是只读的 -->
			<tx:method name="query*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 定义AOP配置 -->
	<aop:aspectj-autoproxy />
	<aop:config>
		<!-- 定义一个切入点 -->
		<aop:pointcut
			expression="execution (* cn.njnode.*.server.impl.*.*(..))"
			id="services" />
		<!-- 对切入点和事务的通知，进行适配 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="services" />
	</aop:config>

	<!-- 配置sqlsessionFactory -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"></property>
		<property name="mapperLocations" value="classpath*:cn/njnode/**/mapper/*.xml" />
	</bean>


	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.njnode.*.dao" />
	</bean>

	<!-- 权限拦截器 -->
	<bean id="authInterceptor" class="cn.njnode.interceptor.AuthInterceptor"/>

	<import resource="classpath:cxf/system-cxf-spring-context.xml"/>
	<import resource="classpath:cxf/subscriber-cxf-spring-context.xml"/>
	<import resource="classpath:cxf/item-cxf-spring-context.xml"/>
</beans>